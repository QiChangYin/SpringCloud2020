LB负载均衡有软件nginx、LVS、硬件FS等
Ribbon本地负载均衡客户 VS  Nginx服务端的负载均衡区别
Nginx是服务器的负载均衡，服务端的所有请求都会先到Nginx，由Nginx进行转发请求，即负载均衡是由服务端实现的
Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务器列表之后缓存到JVM本地，从而本地实现了RPC的远程调用技术
Feign是Spring Cloud组件中一个轻量级RESTful的HTTP服务客户端，Feign内置了Ribbon，用来做客户端的负载均衡
，去调用服务注册中心的服务。Feign的注解定了接口，就可以调用服务注册中心进行Feigin依赖
OpenFeign是Spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign可以解析
SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中
Eureka注册中心，2个服务提供者，一个服务消费者
server：
   port：7997
spring：
   application：
     name: cloud-order
eureka:
   client:
      service-url:
         defaultZone: http://localhost:8761/eureka
   instance:
      instance-id: ${spring.cloud.client.ip-address}:${server.port}
      prefer-ip-address: true
便携SpringBoot启动类，并使用@EnableFeignClients注解，开始Feign客户端
@EnableFeignClients
@SpringBootApplication
public class OrderMain7979 {
    public static void main(String[] args){
      SpringApplication.run(OrderMain7979.class, args)
    }
}

@Component
@FeignClient("CLOUD-PAYMENT-SERVICE")
public interface PaymentFeignService {
   @GetMapping("/payment/get/{id}")
   public CommonResult getPaymentById(@PathVariable("id") Long id){
   }
}
@RestController
@Slf4j
public class OrderFeignController {
   @Autowired
   private PaymentFeignService paymentFeignService;

   @GetMapping("/consumer/payment/get/{id}")
   public CommonResult getPaymentById(@PathVariable("id") Long id){
     return paymentFeignService.getPaymentById(id);
   }
}
OpenFeign 服务超时
在SpringCloud微服务调用的时候，有一些提供的服务没有及时响应，或者服务处理的时间较长，可能造成了调用方超时了。
如果使用OpenFeign调用服务的话，会自动断开，并报错。如果的缺耗时较长，可以设置超时时间。
1、在服务提供者Controller中，编写如下服务（耗时3s），内容如下：
Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里面，许多依赖不可避免的会调用失败，
比如超时，异常等，Hystrix能够保证在一个依赖出了问题的情况下，不会导致整个服务失败，避免脊梁骨着那个，以提升分布式系统的弹性。
断路器本省是一个开关装置，当某个服务单元发生故障之后，通过断路器故障监控，向调用方返回一个符合预期的，可处理的备选响应（FallBack）
而不是长时间等待或者抛出调用方法无法处理的异常，这样就保证服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延、乃至雪崩
服务降级、服务熔断、服务隔离、

服务降级，所谓的降级就是当某个服务出现异常之后，服务器将不再被调用，此时服务端可以自己准备一个本地的fallback回调，返回一个缺省值。
这样做，虽然服务水平下降，但是好歹可用，比直接挂掉要强，当然这要看合适的业务场景。
可能出现服务降级的情况
1、程序运行异常
2、服务超时
3、服务器熔断触发服务降级
4、线程池/信号量打满也会导致服务降级



@SpringBootApplication
@EnableEurekaClient
@EnableCircuitBreaker
public class PaymentMain8008 {
    public static void main(String[] args){
      SpringApplication(PaymenMain8008.class,args);
    }
}


熔断机制
熔断机制是应对雪崩效应的一种微服务链路的保护机制，当扇出链路的某个微服务不可用或者响应时间较长，会进行服务的降级
进而熔断该节点微服务的调用，快速返回错误的响应信息
熔断机制主要通过断路器来实现
断路器的原理
断路器的状态：
Closed：熔断器关闭状态（所有请求返回成功）
Open：熔断器打开状态（调用次数累计达到阈值或者比例，熔断器打开，服务直接返回错误）
Half Open